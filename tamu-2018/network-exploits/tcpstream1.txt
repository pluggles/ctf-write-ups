..... ..#..'..... ..#..'..............!.................!......Ubuntu 16.04.3 LTS
4d437449cdb8 login: ...piggy
Password: I8elieve1CanFly

Last login: Mon Feb 26 22:53:38 UTC 2018 on pts/1
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-1052-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
piggy@4d437449cdb8:~$ ls -la 
ls -la 
total 52
drwxr-xr-x 1 piggy piggy  4096 Feb 22 00:14 .
drwxr-xr-x 1 root  root   4096 Feb 16 20:57 ..
-rw------- 1 piggy piggy 19784 Feb 26 22:54 .bash_history
-rw-r--r-- 1 piggy piggy   220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 piggy piggy  3771 Aug 31  2015 .bashrc
drwx------ 2 piggy piggy  4096 Feb 22 00:10 .cache
-rw-r--r-- 1 root  root     51 Feb 16 20:57 .ctf_flag
-rw-r--r-- 1 piggy piggy   655 May 16  2017 .profile
drwxr-xr-x 6 root  root   4096 Feb 16 20:57 mini-ipam-driver
piggy@4d437449cdb8:~$ cd mini-ipam-driver
cd mini-ipam-driver
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cd ..
cd ..
piggy@4d437449cdb8:~$ ls -la 
ls -la 
total 52
drwxr-xr-x 1 piggy piggy  4096 Feb 22 00:14 .
drwxr-xr-x 1 root  root   4096 Feb 16 20:57 ..
-rw------- 1 piggy piggy 19784 Feb 26 22:54 .bash_history
-rw-r--r-- 1 piggy piggy   220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 piggy piggy  3771 Aug 31  2015 .bashrc
drwx------ 2 piggy piggy  4096 Feb 22 00:10 .cache
-rw-r--r-- 1 root  root     51 Feb 16 20:57 .ctf_flag
-rw-r--r-- 1 piggy piggy   655 May 16  2017 .profile
drwxr-xr-x 6 root  root   4096 Feb 16 20:57 mini-ipam-driver
piggy@4d437449cdb8:~$ cd mini-ipam-driver
cd mini-ipam-driver
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cd driver
cd driver
piggy@4d437449cdb8:~/mini-ipam-driver/driver$ ls -la 
ls -la 
total 16
drwxr-xr-x 2 root root 4096 Feb 16 20:57 .
drwxr-xr-x 6 root root 4096 Feb 16 20:57 ..
-rw-r--r-- 1 root root 6613 Feb 16 20:57 driver.go
piggy@4d437449cdb8:~/mini-ipam-driver/driver$ cd ..
cd ..
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cat README.md
cat README.md
# Mini IPAM Driver
### A libnetwork ipam driver focused on allocating small subnets

Due to a lack of method for specifying the subnet size without explicitly setting the subnet in the default IPAM driver, I created this IPAM driver to allocate subnets of a specific size, but unspecified location.

Additionally I wrote this IPAM driver in the hopes that it could be a useful template for other developers interested in writing an IPAM driver. So if you are trying to trying to figure out how to write an IPAM driver, I hope this code, and my comments below are helpful!

This IPAM plugin is basic. It only handles requests over Unix socket, and stores state in a temp file. This may improve with time, but only as I need it as long as I am the only one using it. If you want to use this driver in your systems hop on [Discord](https://discord.gg/gH9ZgeT) and let me know you are using it or [send me an email](mailto:nategraf1@gmail.com)! I'd be happy to refine it for others to use!

This driver is written in support of my larger project [Naumachia](https://github.com/nategraf/Naumachia). Check it out!

## Usage
Right now installation is pretty much self-guided:
1. Download the binary from the Releases tab
2. Run `sudo ./driver`
3. Start using the driver! (e.g. `docker network create "foo" --ipam-driver mini`)

There is one driver option `CidrMaskLength` which allows you to set the subnet mask length for the request subnet to an integer between 0 and 31 inclusive to control subet size.

You can create scripts around this to have it start on boot (e.g. with `upstart` or `cron @reboot`) to make things easier.

## How to write an IPAM driver
Any driver you will write for [libnetwork](https://github.com/docker/libnetwork) (Docker's networking stack) will be configured as a "[remote](https://github.com/docker/libnetwork/blob/master/docs/remote.md)" server which libnetwork will [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call) to accomplish the some work. This server can be implemented in any language and be served either on a Unix socket locally or an HTTP server somewhere else.

For IPAM, the API we are implementing is specified in [ipam.md](https://github.com/docker/libnetwork/blob/master/docs/ipam.md)

Although this can be done in any language or framework, libnetwork lends a helping hand for Golang developers with a [basic framework for plugins](https://github.com/docker/go-plugins-helpers) including the [ipam plugin](https://github.com/docker/go-plugins-helpers/tree/master/ipam)

The implementation in this repo uses the [provided ipam helper code](https://github.com/docker/go-plugins-helpers/tree/master/ipam) and additionally defines it's own further simplified interface for an `Allocator` to separate the logic of the driver interaction from the nitty gritty of allocation. This is done to facilitate the creation of a suitable global IPAM allocator using an external store in the future, as well as improve readability. Hopefully you can benefit from this and use some or all of the driver code for your implementation.

The actual allocator logic itself is in `allocator.go`. The approach I use is a inspired by the ["buddy system" for memory allocation](https://en.wikipedia.org/wiki/Buddy_memory_allocation). The tracking strcuture is a [32 level list](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L62), in which each level contains a list of availible subnets of that mask length (size). As pools are allocated the larger pools will be [broken up and populate down](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L139-L143) the lists (from larger to smaller) and as pools are freed the pools will [coalesce and move back up](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L95-L103) the lists (from smaller to larger). Additionally there is a [map of allocated pools and addresses](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L63) in string form to make querying for allocated resources fast.

For storage I employ a simple strategy of saving to a file on each update and loading form that file on startup. An [asynchronous goroutine](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L68) is responsible for saving the current state, and receives [notifications via condition variable](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L261-L265) when it's time to work.

I hope this implementation is a helpful starting point for your own IPAM module!
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cat LICENSE
cat LICENSE
Copyright 2018 Victor "Nate" Graf

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
piggy@4d437449cdb8:~/mini-ipam-driver$ ..... ..#..'..... ..#..'..............!.................!......Ubuntu 16.04.3 LTS
4d437449cdb8 login: ...piggy
Password: I8elieve1CanFly

Last login: Mon Feb 26 22:53:38 UTC 2018 on pts/1
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-1052-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
piggy@4d437449cdb8:~$ ls -la 
ls -la 
total 52
drwxr-xr-x 1 piggy piggy  4096 Feb 22 00:14 .
drwxr-xr-x 1 root  root   4096 Feb 16 20:57 ..
-rw------- 1 piggy piggy 19784 Feb 26 22:54 .bash_history
-rw-r--r-- 1 piggy piggy   220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 piggy piggy  3771 Aug 31  2015 .bashrc
drwx------ 2 piggy piggy  4096 Feb 22 00:10 .cache
-rw-r--r-- 1 root  root     51 Feb 16 20:57 .ctf_flag
-rw-r--r-- 1 piggy piggy   655 May 16  2017 .profile
drwxr-xr-x 6 root  root   4096 Feb 16 20:57 mini-ipam-driver
piggy@4d437449cdb8:~$ cd mini-ipam-driver
cd mini-ipam-driver
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cd ..
cd ..
piggy@4d437449cdb8:~$ ls -la 
ls -la 
total 52
drwxr-xr-x 1 piggy piggy  4096 Feb 22 00:14 .
drwxr-xr-x 1 root  root   4096 Feb 16 20:57 ..
-rw------- 1 piggy piggy 19784 Feb 26 22:54 .bash_history
-rw-r--r-- 1 piggy piggy   220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 piggy piggy  3771 Aug 31  2015 .bashrc
drwx------ 2 piggy piggy  4096 Feb 22 00:10 .cache
-rw-r--r-- 1 root  root     51 Feb 16 20:57 .ctf_flag
-rw-r--r-- 1 piggy piggy   655 May 16  2017 .profile
drwxr-xr-x 6 root  root   4096 Feb 16 20:57 mini-ipam-driver
piggy@4d437449cdb8:~$ cd mini-ipam-driver
cd mini-ipam-driver
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cd driver
cd driver
piggy@4d437449cdb8:~/mini-ipam-driver/driver$ ls -la 
ls -la 
total 16
drwxr-xr-x 2 root root 4096 Feb 16 20:57 .
drwxr-xr-x 6 root root 4096 Feb 16 20:57 ..
-rw-r--r-- 1 root root 6613 Feb 16 20:57 driver.go
piggy@4d437449cdb8:~/mini-ipam-driver/driver$ cd ..
cd ..
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cat README.md
cat README.md
# Mini IPAM Driver
### A libnetwork ipam driver focused on allocating small subnets

Due to a lack of method for specifying the subnet size without explicitly setting the subnet in the default IPAM driver, I created this IPAM driver to allocate subnets of a specific size, but unspecified location.

Additionally I wrote this IPAM driver in the hopes that it could be a useful template for other developers interested in writing an IPAM driver. So if you are trying to trying to figure out how to write an IPAM driver, I hope this code, and my comments below are helpful!

This IPAM plugin is basic. It only handles requests over Unix socket, and stores state in a temp file. This may improve with time, but only as I need it as long as I am the only one using it. If you want to use this driver in your systems hop on [Discord](https://discord.gg/gH9ZgeT) and let me know you are using it or [send me an email](mailto:nategraf1@gmail.com)! I'd be happy to refine it for others to use!

This driver is written in support of my larger project [Naumachia](https://github.com/nategraf/Naumachia). Check it out!

## Usage
Right now installation is pretty much self-guided:
1. Download the binary from the Releases tab
2. Run `sudo ./driver`
3. Start using the driver! (e.g. `docker network create "foo" --ipam-driver mini`)

There is one driver option `CidrMaskLength` which allows you to set the subnet mask length for the request subnet to an integer between 0 and 31 inclusive to control subet size.

You can create scripts around this to have it start on boot (e.g. with `upstart` or `cron @reboot`) to make things easier.

## How to write an IPAM driver
Any driver you will write for [libnetwork](https://github.com/docker/libnetwork) (Docker's networking stack) will be configured as a "[remote](https://github.com/docker/libnetwork/blob/master/docs/remote.md)" server which libnetwork will [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call) to accomplish the some work. This server can be implemented in any language and be served either on a Unix socket locally or an HTTP server somewhere else.

For IPAM, the API we are implementing is specified in [ipam.md](https://github.com/docker/libnetwork/blob/master/docs/ipam.md)

Although this can be done in any language or framework, libnetwork lends a helping hand for Golang developers with a [basic framework for plugins](https://github.com/docker/go-plugins-helpers) including the [ipam plugin](https://github.com/docker/go-plugins-helpers/tree/master/ipam)

The implementation in this repo uses the [provided ipam helper code](https://github.com/docker/go-plugins-helpers/tree/master/ipam) and additionally defines it's own further simplified interface for an `Allocator` to separate the logic of the driver interaction from the nitty gritty of allocation. This is done to facilitate the creation of a suitable global IPAM allocator using an external store in the future, as well as improve readability. Hopefully you can benefit from this and use some or all of the driver code for your implementation.

The actual allocator logic itself is in `allocator.go`. The approach I use is a inspired by the ["buddy system" for memory allocation](https://en.wikipedia.org/wiki/Buddy_memory_allocation). The tracking strcuture is a [32 level list](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L62), in which each level contains a list of availible subnets of that mask length (size). As pools are allocated the larger pools will be [broken up and populate down](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L139-L143) the lists (from larger to smaller) and as pools are freed the pools will [coalesce and move back up](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L95-L103) the lists (from smaller to larger). Additionally there is a [map of allocated pools and addresses](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L63) in string form to make querying for allocated resources fast.

For storage I employ a simple strategy of saving to a file on each update and loading form that file on startup. An [asynchronous goroutine](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L68) is responsible for saving the current state, and receives [notifications via condition variable](https://github.com/nategraf/mini-ipam-driver/blob/master/allocator/allocator.go#L261-L265) when it's time to work.

I hope this implementation is a helpful starting point for your own IPAM module!
piggy@4d437449cdb8:~/mini-ipam-driver$ ls -la 
ls -la 
total 44
drwxr-xr-x 6 root  root  4096 Feb 16 20:57 .
drwxr-xr-x 1 piggy piggy 4096 Feb 22 00:14 ..
drwxr-xr-x 8 root  root  4096 Feb 16 20:57 .git
-rw-r--r-- 1 root  root   218 Feb 16 20:57 .gitignore
-rw-r--r-- 1 root  root  1058 Feb 16 20:57 LICENSE
-rw-r--r-- 1 root  root  4602 Feb 16 20:57 README.md
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 allocator
-rwxr-xr-x 1 root  root   342 Feb 16 20:57 build.sh
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 bytop
drwxr-xr-x 2 root  root  4096 Feb 16 20:57 driver
piggy@4d437449cdb8:~/mini-ipam-driver$ cat LICENSE
cat LICENSE
Copyright 2018 Victor "Nate" Graf

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
piggy@4d437449cdb8:~/mini-ipam-driver$ 